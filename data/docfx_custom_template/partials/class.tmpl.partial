{{!Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information.}}

{{>partials/class.header}}

{{#children}}
<h3 id="{{id}}">{{>partials/classSubtitle}}</h3>
{{#children}}

{{#summary}}
	<div class="custom-menu-summary-data">
		<div class="markdown level1 summary member-summary">{{{summary}}}</div>
		<div class="markdown level1 conceptual member-summary-conceptual">{{{conceptual}}}</div>
	</div>
{{/summary}}

{{^_disableContribution}}
{{#sourceurl}}
<div class="custom-source-code-link-container custom-source-code-link--{{id}}">
<span class="small pull-right mobile-hide">
  <a href="{{sourceurl}}">{{__global.viewSource}}</a>
</span>
</div>{{/sourceurl}}
{{/_disableContribution}}
{{#overload}}
<a id="{{id}}" data-uid="{{uid}}"></a>
{{/overload}}

<div class="custom-menu-data">
	<h4 id="{{id}}" data-uid="{{uid}}" class="h4-custom-functionName">{{syntax.content.0.value}}</h4>

	<div class="custom-menu-data-container">
    	{{#example}}
			<div class="custom-menu-data-name" style="display: none;">
			  	<div class="syslib-tab-menu-data--close">X</div>
				<div class="codewrapper">{{{.}}}</div>
	        	<div class="comment-examples-container-bottom"></div>
      		</div>
		{{/example}}

		{{#syntax}}
			<div class="custom-menu-data-arguments" style="display: none;">
				<div class="syslib-tab-menu-data--close">X</div>
				{{#typeParameters.0}}
					<h5 class="typeParameters class-tmpl-partial-typeParameters">Generic types</h5>
					<table class="table table-bordered table-striped table-condensed class-tmpl-partial-typeParameters-table">
					<thead>
						<tr>
						<th>{{__global.name}}</th>
						<th>{{__global.description}}</th>
						</tr>
					</thead>
					<tbody>
					{{/typeParameters.0}}
					{{#typeParameters}}
						<tr>
						<td><span class="parametername">{{{id}}}</span></td>
						<td>{{{description}}}</td>
						</tr>
					{{/typeParameters}}
					{{#typeParameters.0}}
					</tbody>
					</table>
					{{/typeParameters.0}}

					{{#parameters.0}}
					<h5 class="typeParameters class-tmpl-partial-typeParameters">Methods arguments</h5>
					<table class="table table-bordered table-striped table-condensed">
					<thead>
						<tr>
						<th>{{__global.type}}</th>
						<th>{{__global.name}}</th>
						<th>{{__global.description}}</th>
						</tr>
					</thead>
					<tbody>
					{{/parameters.0}}
					{{#parameters}}
						<tr>
							<td>{{{type.specName.0.value}}}</td>
							<td><span class="parametername">{{{id}}}</span></td>
							<td>{{{description}}}</td>
						</tr>
					{{/parameters}}
					{{#parameters.0}}
					</tbody>
					</table>
					{{/parameters.0}}
			</div>

			{{#return}}
			<div class="custom-menu-data-returntype" style="display: none;">
				<div class="syslib-tab-menu-data--close">X</div>

				<table class="table table-bordered table-striped table-condensed table-return">
					<thead>
					<tr>
						<th>{{__global.type}}</th>
						<th>{{__global.description}}</th>
					</tr>
					</thead>
					<tbody>
					<tr>
						<td>{{{type.specName.0.value}}}</td>
						<td>{{{description}}}</td>
					</tr>
					</tbody>
				</table>
			</div>
			{{/return}}
    	{{/syntax}}
	</div>
</div>


{{#syntax}}
{{#fieldValue}}
<h5 class="fieldValue">{{__global.fieldValue}}</h5>
<table class="table table-bordered table-striped table-condensed fieldValue-table">
  <thead>
    <tr>
      <th>{{__global.type}}</th>
      <th>{{__global.description}}</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>{{{type.specName.0.value}}}</td>
      <td>{{{description}}}</td>
    </tr>
  </tbody>
</table>
{{/fieldValue}}
{{#propertyValue}}
<h5 class="propertyValue">{{__global.propertyValue}}</h5>
<table class="table table-bordered table-striped table-condensed propertyValue-table">
  <thead>
    <tr>
      <th>{{__global.type}}</th>
      <th>{{__global.description}}</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>{{{type.specName.0.value}}}</td>
      <td>{{{description}}}</td>
    </tr>
  </tbody>
</table>
{{/propertyValue}}
{{#eventType}}
<h5 class="eventType">{{__global.eventType}}</h5>
<table class="table table-bordered table-striped table-condensed">
  <thead>
    <tr>
      <th>{{__global.type}}</th>
      <th>{{__global.description}}</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>{{{type.specName.0.value}}}</td>
      <td>{{{description}}}</td>
    </tr>
  </tbody>
</table>
{{/eventType}}
{{/syntax}}
{{#overridden}}
<h5 class="overrides">{{__global.overrides}}</h5>
<div class="overrides-content"><xref uid="{{uid}}" altProperty="fullName" displayProperty="nameWithType"/></div>
{{/overridden}}
{{#remarks}}
<h5 id="{{id}}_remarks">{{__global.remarks}}</h5>
<div class="markdown level1 remarks">{{{remarks}}}</div>
{{/remarks}}
{{#exceptions.0}}
<h5 class="exceptions">{{__global.exceptions}}</h5>
<table class="table table-bordered table-striped table-condensed">
  <thead>
    <tr>
      <th>{{__global.type}}</th>
      <th>{{__global.condition}}</th>
    </tr>
  </thead>
  <tbody>
{{/exceptions.0}}
{{#exceptions}}
    <tr>
      <td>{{{type.specName.0.value}}}</td>
      <td>{{{description}}}</td>
    </tr>
{{/exceptions}}
{{#exceptions.0}}
  </tbody>
</table>
{{/exceptions.0}}
{{#seealso.0}}
<h5 id="{{id}}_seealso">{{__global.seealso}}</h5>
<div class="seealso">
{{/seealso.0}}
{{#seealso}}
  {{#isCref}}
    <div>{{{type.specName.0.value}}}</div>
  {{/isCref}}
  {{^isCref}}
    <div>{{{url}}}</div>
  {{/isCref}}
{{/seealso}}
{{#seealso.0}}
</div>
{{/seealso.0}}
{{/children}}
{{/children}}
{{#implements.0}}
<h3 id="implements">{{__global.implements}}</h3>
{{/implements.0}}
{{#implements}}
<div class="implements-content">
  {{#definition}}
    <xref uid="{{definition}}" altProperty="fullName" displayProperty="nameWithType"/>
  {{/definition}}
  {{^definition}}
    <xref uid="{{uid}}" altProperty="fullName" displayProperty="nameWithType"/>
  {{/definition}}
</div>
{{/implements}}
{{#extensionMethods.0}}
<h3 id="extensionmethods">{{__global.extensionMethods}}</h3>
{{/extensionMethods.0}}
{{#extensionMethods}}
<div class="extensionmethods-content">
  {{#definition}}
    <xref uid="{{definition}}" altProperty="fullName" displayProperty="nameWithType"/>
  {{/definition}}
  {{^definition}}
    <xref uid="{{uid}}" altProperty="fullName" displayProperty="nameWithType"/>
  {{/definition}}
</div>
{{/extensionMethods}}
{{#seealso.0}}
<h3 id="seealso">{{__global.seealso}}</h3>
<div class="seealso">
{{/seealso.0}}
{{#seealso}}
  {{#isCref}}
    <div>{{{type.specName.0.value}}}</div>
  {{/isCref}}
  {{^isCref}}
    <div>{{{url}}}</div>
  {{/isCref}}
{{/seealso}}
{{#seealso.0}}
</div>
{{/seealso.0}}


<script>
	function getItems(selector) {
    	return document.querySelectorAll(selector);
	}

	//CLASS FUNCTIONS
	function getClassNameIndex(parts) {
		for (var i = 0; i < parts.length; i++) {
			if (parts[i] === "class") {
				return i + 1;
			}
		}
		return 0;
	}

	function getClassGenericStartIndex(parts, classNameIndex) {
		let part = parts[classNameIndex];
		if (part.includes("&lt;") && part.includes("&gt;")) {
			return part.indexOf("&lt;");
		}
		if (part.includes("&lt;") && part.includes(",")) {
			return part.indexOf("&lt;");
		}
		return 0;
	}

	function classHasMultipleGenerics(parts, classNameIndex) {
		let part = parts[classNameIndex];
		if (part.includes("&lt;")) {
			if (part.includes(',')) {
				return true;
			}
		}
		return false;
	}

	function getClassName(parts, classNameIndex) {
		var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex);
		var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex);

		if (genericStartIndex > 0) {
			parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex);

			if (hasMultipleGenerics) {
				return '<span class="classNameHeading">' + parts[classNameIndex] + '</span><span class="class-multigeneric">&lt;&gt;</span>';
			} else {
				return '<span class="classNameHeading">' + parts[classNameIndex] + '</span><span class="class-generic">&lt;&gt;</span>';
			}
		}
		return '<span class="classNameHeading">' + parts[classNameIndex] + '</span>';
	}

	function cleanCssName(text) {
		if (text) {
			text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', '');
			text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', '');
			text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', '');

			var genericIndex = text.indexOf('&lt');
			if(genericIndex > 0) {
				text = text.substring(0, genericIndex) + "_generic_";
			} else {
				text = text.replace('&', '');
			}

			text = text.toLowerCase();

			if(text.includes('attributeusage')) {
				text = 'attributeusage';
			}
			return text;
		}
		return "";
	}

	function updateClassNames() {
		var items = getItems(".h1-custom-display.className");

		for (var i = 0; i < items.length; i++) {
			var value = items[i].innerHTML;

			if (!value || value.length < 4 || !value.includes(' ')) {
				console.warn("Class is wrong: " + value);
				continue;
			}

			var parts = value.split(' ');
			var classNameIndex = getClassNameIndex(parts);

			var startIndex = 0;
			var tempIndex = classNameIndex;
			while(tempIndex > 1) {
				startIndex++;
				tempIndex--;
			}

			for (var j = 0; j < parts.length; j++) {

				if(j < startIndex) {
					parts[j] = "";
				}
				else if (j > classNameIndex || parts[j] === "sealed" || parts[j] === "public") {
					parts[j] = "";
				} else if (j === classNameIndex) {
					parts[classNameIndex] = getClassName(parts, classNameIndex);
				} else {
					var cleanedClassSuffix = cleanCssName(parts[j]);
					if(cleanedClassSuffix !== null && cleanedClassSuffix.length > 1)	{
						parts[j] = "<span class='classNameHeader className--" + cleanedClassSuffix + "'>" + parts[j] + "</span> ";
						console.log(parts[j]);
					}
				}
			}

			var innerHtml = parts.join('');
			items[i].innerHTML = innerHtml + "<p class='classMargin'>{</p>";
		}
	}
	//CLASS FUNCTIONS END

	//FUNCTION FUNCTIONS
	function getFunctionNameIndex(parts) {
		for (var i = 0; i < parts.length; i++) {
			var index = parts[i].indexOf('(');

			if (index > 0) {
				var greaterthan = parts[i].indexOf("&gt;");
				if (greaterthan == -1) {
					//Non-generic function
					return i;
				}

				var lessthan = parts[i].indexOf("&lt;");
				if (lessthan == - 1) {
					return i - 1;
				}
				return i;
			}
		}
		return 0;
	}

	function functionIsGeneric(parts, functionNameIndex) {
		var part = parts[functionNameIndex];
		var isGeneric = part.indexOf("&gt;") >= 0 || part.indexOf("&lt;") >= 0;
		return isGeneric;
	}

	function functionHasMultipleGenerics(parts, functionNameIndex) {
		var part = parts[functionNameIndex];
		return part.indexOf("&lt;") >= 0 && part.indexOf("&gt;") === -1
	}

	function functionHasArguments(parts, functionNameIndex) {
		var p = parts[functionNameIndex];

		var emptyArguments = p.includes("()");

		if (emptyArguments) {
			return !emptyArguments;
		}

		if (p.indexOf(',') >= 0) {
			var nextPart = parts[functionNameIndex + 1];
			emptyArguments = nextPart.includes("()");
			if (emptyArguments) {
				return !emptyArguments;
			} else {
				//Multigeneric function here
				for (var i = functionNameIndex + 1; i < parts.length; i++) {
					if (parts[i].indexOf('(') >= 0) {
						emptyArguments = parts[i].includes("()");
						break;
					}
				}
				return !emptyArguments;
			}
		} else {
			if (parts[functionNameIndex + 1].indexOf(',') >= 0) {
				//Multigeneric function here
			}
		}
		return !emptyArguments;
	}

	function getFunctionName(parts, functionNameIndex) {
		var part = parts[functionNameIndex];

		var hasArguments = functionHasArguments(parts, functionNameIndex);

		var isGeneric = functionIsGeneric(parts, functionNameIndex);

		var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex);

		var genericStartIndex = part.indexOf('&lt;');
		var funcStartIndex = part.indexOf('(');

		if (genericStartIndex >= 0) {
			part = part.substring(0, genericStartIndex);
		}
		if (funcStartIndex >= 0) {
			part = part.substring(0, funcStartIndex);
		}

		var arg = hasArguments ? "<span class='custom-arguments custom-arguments-onclick'>( )</span>" : "<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>";

		part = "<span class='custom-name custom-name-onclick'>" + part + "</span>";
		if (isMultiGeneric) {
			return part + "<span class='custom-arguments custom-arguments-onclick function-multigeneric'>&lt;&gt;</span>" + arg;
		} else if (isGeneric) {
			return part + "<span class='custom-arguments custom-arguments-onclick function-generic'>&lt;&gt;</span>" + arg;
		}
		return part + arg;
	}

	function updateFunctionNames() {
		var items = getItems(".h4-custom-functionName");

		for (var i = 0; i < items.length; i++) {
			var value = items[i].innerHTML;
			if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) {
				items[i].classList.add("non-function-element");
				items[i].innerHTML = items[i].innerHTML.replace('public', '');
				continue;
			}

			var parts = value.split(' ');

			var functionNameIndex = getFunctionNameIndex(parts);

			parts[functionNameIndex] = getFunctionName(parts, functionNameIndex);

			for (var j = 0; j < parts.length; j++) {
				if (j > functionNameIndex || parts[j] === "public") {
					parts[j] = "";
				}
				else if (j < functionNameIndex) {
					parts[j] = "<span class='custom-keywords custom-keywords--" + cleanCssName(parts[j]) + "'>" + parts[j] + "</span> ";
				}
			}

			parts = parts.filter(x => typeof (x) !== 'undefined' && x !== "" && x !== null && x !== " ");
			
			/*var argumentsPart = parts[parts.length-1];
			if(argumentsPart) {
				argumentsPart = "<span class='custom-arguments custom-arguments-onclick'>" + argumentsPart + "</span>";
				parts[parts.length-1] = argumentsPart;
			}*/

			if (parts.length > 1) {
				var returnTypePart = parts[parts.length - 2];
				if (returnTypePart) {
					returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', '');
					returnTypePart = "<span class='custom-returntype custom-returntype-onclick'>" + returnTypePart + "</span>";
					parts[parts.length - 2] = returnTypePart;
				}
			}

			var innerHtml = parts.join(' ');
			items[i].innerHTML = innerHtml;
		}
	}

	function addEventsToTabCloseButtons() {
		var i;

		var closeButtons = document.getElementsByClassName("syslib-tab-menu-data--close");

		for (i = 0; i < closeButtons.length; i++) {
			closeButtons[i].addEventListener("click", function () {
				let par = this.parentNode;
				if (par.style.display === "block") {
					par.style.display = "none";
				}
			})
		}
	}

	function addEventDisplayMenuDataOnClickPart(partName) {
		var i;

		var parts = document.getElementsByClassName("custom-" + partName + "-onclick");

		var menuDataClass = 'custom-menu-data-' + partName;
		for (i = 0; i < parts.length; i++) {
			var container = parts[i];
			while (container) {
				container = container.parentNode;
				if (container && container.classList && container.classList.contains('custom-menu-data')) {
					break;
				}
			}
			if (container) {
				var menuData = container.getElementsByClassName(menuDataClass)[0];

				//MenuData do not exist at all, change button layout to red
				if(!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) {
					if(menuDataClass.includes('-class-') >= 1) {
						parts[i].classList.toggle('hidden');
					} else {
						var h4 = container.getElementsByClassName('h4-custom-functionName');
						if(h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) {
							//CTOR has no example, then just hide the whole CTOR line
							container.classList.toggle('hidden');
						}
						parts[i].classList.toggle('custom-menu-data-no-text');
					}
				}
				 else {
					 //MenuData is empty or contains only the "X" button, change button layout to red
					 if(menuData.children === null || typeof(menuData.children) === 'undefined' || menuData.children.length <= 1) {
						if(menuDataClass.includes('-class-') >= 1) {
							parts[i].classList.toggle('hidden');
						} else {

							var h4 = container.getElementsByClassName('h4-custom-functionName');
							if(h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) {
								//CTOR has no example, then just hide the whole CTOR line
								container.classList.toggle('hidden');
							} else {
								parts[i].classList.toggle('custom-menu-data-no-text');
							}
						}
					 }
				 }
			}
		}

		for (i = 0; i < parts.length; i++) {
			if(parts[i].classList.contains('custom-menu-data-no-text')) {
				continue;
			}
			parts[i].addEventListener("click", function (e) {
				e.preventDefault();
				var container = this.parentNode
				while (container) {
					container = container.parentNode;
					if (container && container.classList && container.classList.contains('custom-menu-data')) {
						break;
					}
				}

				if (container) {
					var menuData = container.getElementsByClassName(menuDataClass)[0];

					if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) {

						if (menuData.classList.contains('active')) {
							//Hide current Menu Data if clicking the "function name" again
							menuData.style.display = "none";
							menuData.classList.toggle('active');
						} else {
							//Hide all existing Menu Data's
							var menuDatas = document.getElementsByClassName(menuDataClass);
							if (menuDatas && menuDatas.length) {
								for (var j = 0; j < menuDatas.length; j++) {
									if (menuDatas[j].classList.contains('active')) {
										menuDatas[j].classList.toggle('active');
										menuDatas[j].style.display = 'none';
									}
								}
							}

							//Show just one Menu Data, the one we clicked
							menuData.style.display = "block";
							menuData.classList.toggle('active');
						}
					}
				}
			});
		}
	}

	function removeEmptyPopup(query) {
		var popup = document.getElementsByClassName(query);
		if (popup) {
			for (var i = 0; i < popup.length; i++) {
				if (popup[i]) {
					var data = popup[i].nextElementSibling;
					if (!data || data.childElementCount <= 1) {
						popup[i].remove();
						i = i - 1;
					}
				}
			}
		}
	}
	function removeEmptyPopups() {
		removeEmptyPopup("custom-menu-data-class-arguments");
		removeEmptyPopup("custom-menu-data-class-example");
		removeEmptyPopup("custom-menu-data-name");
		removeEmptyPopup("custom-menu-data-arguments");
		removeEmptyPopup("custom-menu-data-returntype");

		removeEmptyPopup("custom-menu-data-container");
	}

	function hideAllEmptyMarkdowns() {
		var items = getItems('.markdown.level1.summary.member-summary');
		if (items && items.length) {
		    for (var i = 0; i < items.length; i++) {
		        if (items[i].children && items[i].children.length === 0) {
		            items[i].classList.add("hidden");
		        }
		        if (items[i].value) {
		            if (items[i].value.length <= 1) {
		                items[i].classList.add("hidden");
		            }
		        }

		        if (items[i].innerHTML) {
		            if (items[i].innerHTML.length <= 1) {
		                items[i].classList.add("hidden");
		            }
		        }

		        if (items[i].innerText) {
		            if (items[i].innerText.length <= 1) {
		                items[i].classList.add("hidden");
		            }
		        }
		    }
		}
	}

	//FUNCTION FUNCTIONS END
	setTimeout(updateFunctionNames, 5);
	setTimeout(updateClassNames, 5);

	setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 33);
	setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 35);
	setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 40);
	setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 45);
	setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 50);

	setTimeout(() => hideAllEmptyMarkdowns(), 55);

	setTimeout(addEventsToTabCloseButtons, 60);

	//setTimeout(removeEmptyPopups, 75);
</script>

{{!end div: custom-class-content-inline}}
</div>

<p class='classMargin'>}</p>
