{{!Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root
for full license information.}}

<div id="custom-skipDocumentationFor"
  style="overflow: hidden;font-size: 1px;max-width: 1px; visibility: hidden; position: absolute; margin-left: -4000px;">
  [%custom-skipDocumentationFor%]
</div>

<div class="sidenav hide-when-search">
  <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false"
    aria-controls="sidetoggle">{{__global.tocToggleButton}}</a>
  <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false"
    aria-controls="sidetoggle">{{__global.tocToggleButton}}</a>
  <div class="sidetoggle collapse" id="sidetoggle">
    <div id="sidetoc" class="hideonload"></div>
  </div>
</div>

<script>
  function sideTocShowOnLoad() {
    var sidetoc = document.getElementById('sidetoc');
    sidetoc.classList.remove('hideonload');
  }

  function hideLinksQueryBasedInToc() {
    var skipDocumentationForContainer = document.getElementById('custom-skipDocumentationFor');
    if (skipDocumentationForContainer) {
      var innerHtml = skipDocumentationForContainer.innerHTML;

      if (innerHtml && innerHtml.length > 1) {
        var toc = document.getElementById('toc');
        if (toc && toc.querySelector) {
          var skipPatterns = innerHtml.split(',').map(x => x.trim()).filter(Boolean);

          console.log(skipPatterns);

          var links = toc.getElementsByTagName('a');
          if (!links || links.length === 0) return;

          for (var i = 0; i < links.length; i++) {
            var link = links[i];
            var path = link.pathname || '';
            var title = link.getAttribute('title') || '';

            for (var j = 0; j < skipPatterns.length; j++) {
              var pattern = skipPatterns[j];

              var matches = false;
              if (pattern.includes('*')) {
                var cleanPattern = pattern.replace(/\*/g, '');
                if (path.includes(cleanPattern)) matches = true;
              } else if (pattern.includes('.')) {
                if (path.startsWith('/' + pattern)) matches = true;
              } else {
                if (title.endsWith(pattern)) matches = true;
              }

              if (matches) {
                try {
                  var parent = link.parentNode;
                  if (parent && parent.remove) {
                    var namespaceParent = parent.parentNode;
                    parent.remove();

                    if (namespaceParent && namespaceParent.classList.contains('level2')) {
                      if (namespaceParent.children.length <= 1) {
                        var nsGroup = namespaceParent.parentNode;
                        if (nsGroup && nsGroup.remove) nsGroup.remove();
                      }
                    }
                  }
                } catch (e) {
                  console.warn("Error cleaning a TOC link:", e);
                }
                break; // stop checking once matched
              }
            }
          }

          if (typeof sideTocShowOnLoad === "function") sideTocShowOnLoad();
        }
      }
    }
  }

  setTimeout(() => sideTocShowOnLoad(), 100);

</script>