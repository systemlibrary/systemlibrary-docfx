{{!Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information.}}

{{>partials/class.header}}
{{#children}}
<h3 id="{{id}}">{{>partials/classSubtitle}}</h3>
{{#children}}
{{^_disableContribution}}
{{#sourceurl}}
<span class="small pull-right mobile-hide">
  <a href="{{sourceurl}}">{{__global.viewSource}}</a>
</span>{{/sourceurl}}
{{/_disableContribution}}
{{#overload}}
<a id="{{id}}" data-uid="{{uid}}"></a>
{{/overload}}

<h4 id="{{id}}" data-uid="{{uid}}" class="hidden">{{name.0.value}}</h4>
<h4 id="{{id}}" data-uid="{{uid}}" class="h4-custom-display functionName">{{syntax.content.0.value}}</h4>

	<div class="syslib-tab-menu-container">
    {{#summary}}
      <div class="syslib-tab-menu-clickable syslib-tab-menu-clickable--example">
        <h5 id="{{id}}_summary">Summary</h5>
      </div>

      <div class="syslib-tab-menu-data" style="display: none;"><div class="syslib-tab-menu-data--close">X</div>
        <div class="markdown level1 summary member-summary">{{{summary}}}</div>
        <div class="markdown level1 conceptual member-summary-conceptual">{{{conceptual}}}</div>
      </div>
    {{/summary}}

    {{#example}}
      <div class="syslib-tab-menu-clickable syslib-tab-menu-clickable--example">
        <h5 id="{{id}}_examples">{{__global.examples}}</h5>
      </div>
      <div class="syslib-tab-menu-data" style="display: none;"><div class="syslib-tab-menu-data--close">X</div>
        <div class="codewrapper">
          {{{.}}}
        </div>
        <div class="comment-examples-container-bottom"></div>
      </div>
    {{/example}}

    {{#syntax}}


      <div class="syslib-tab-menu-clickable syslib-tab-menu-clickable--example">
        <h5 id="{{id}}_arguments">Arguments</h5>
      </div>

      <div class="syslib-tab-menu-data" style="display: none;"><div class="syslib-tab-menu-data--close">X</div>

      {{#typeParameters.0}}
        <h5 class="typeParameters class-tmpl-partial-typeParameters">Generic types</h5>
        <table class="table table-bordered table-striped table-condensed class-tmpl-partial-typeParameters-table">
          <thead>
            <tr>
              <th>{{__global.name}}</th>
              <th>{{__global.description}}</th>
            </tr>
          </thead>
          <tbody>
        {{/typeParameters.0}}
        {{#typeParameters}}
            <tr>
              <td><span class="parametername">{{{id}}}</span></td>
              <td>{{{description}}}</td>
            </tr>
        {{/typeParameters}}
        {{#typeParameters.0}}
          </tbody>
        </table>
        {{/typeParameters.0}}

        {{#parameters.0}}
        <h5 class="typeParameters class-tmpl-partial-typeParameters">Methods arguments</h5>
        <table class="table table-bordered table-striped table-condensed">
          <thead>
            <tr>
              <th>{{__global.type}}</th>
              <th>{{__global.name}}</th>
              <th>{{__global.description}}</th>
            </tr>
          </thead>
          <tbody>
          {{/parameters.0}}
          {{#parameters}}
              <tr>
                <td>{{{type.specName.0.value}}}</td>
                <td><span class="parametername">{{{id}}}</span></td>
                <td>{{{description}}}</td>
              </tr>
          {{/parameters}}
          {{#parameters.0}}
          </tbody>
        </table>
        {{/parameters.0}}
      </div>

      {{#return}}
      <div class="syslib-tab-menu-clickable syslib-tab-menu-clickable--example">
        <h5 id="{{id}}_returns">Returns</h5>
      </div>

      <div class="syslib-tab-menu-data" style="display: none;"><div class="syslib-tab-menu-data--close">X</div>

      <table class="table table-bordered table-striped table-condensed table-return">
        <thead>
          <tr>
            <th>{{__global.type}}</th>
            <th>{{__global.description}}</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>{{{type.specName.0.value}}}</td>
            <td>{{{description}}}</td>
          </tr>
        </tbody>
      </table>

      </div>
    {{/return}}

    {{/syntax}}
  </div>

{{#syntax}}


{{#fieldValue}}
<h5 class="fieldValue">{{__global.fieldValue}}</h5>
<table class="table table-bordered table-striped table-condensed fieldValue-table">
  <thead>
    <tr>
      <th>{{__global.type}}</th>
      <th>{{__global.description}}</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>{{{type.specName.0.value}}}</td>
      <td>{{{description}}}</td>
    </tr>
  </tbody>
</table>
{{/fieldValue}}
{{#propertyValue}}
<h5 class="propertyValue">{{__global.propertyValue}}</h5>
<table class="table table-bordered table-striped table-condensed propertyValue-table">
  <thead>
    <tr>
      <th>{{__global.type}}</th>
      <th>{{__global.description}}</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>{{{type.specName.0.value}}}</td>
      <td>{{{description}}}</td>
    </tr>
  </tbody>
</table>
{{/propertyValue}}
{{#eventType}}
<h5 class="eventType">{{__global.eventType}}</h5>
<table class="table table-bordered table-striped table-condensed">
  <thead>
    <tr>
      <th>{{__global.type}}</th>
      <th>{{__global.description}}</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>{{{type.specName.0.value}}}</td>
      <td>{{{description}}}</td>
    </tr>
  </tbody>
</table>
{{/eventType}}
{{/syntax}}
{{#overridden}}
<h5 class="overrides">{{__global.overrides}}</h5>
<div class="overrides-content"><xref uid="{{uid}}" altProperty="fullName" displayProperty="nameWithType"/></div>
{{/overridden}}
{{#remarks}}
<h5 id="{{id}}_remarks">{{__global.remarks}}</h5>
<div class="markdown level1 remarks">{{{remarks}}}</div>
{{/remarks}}
{{#exceptions.0}}
<h5 class="exceptions">{{__global.exceptions}}</h5>
<table class="table table-bordered table-striped table-condensed">
  <thead>
    <tr>
      <th>{{__global.type}}</th>
      <th>{{__global.condition}}</th>
    </tr>
  </thead>
  <tbody>
{{/exceptions.0}}
{{#exceptions}}
    <tr>
      <td>{{{type.specName.0.value}}}</td>
      <td>{{{description}}}</td>
    </tr>
{{/exceptions}}
{{#exceptions.0}}
  </tbody>
</table>
{{/exceptions.0}}
{{#seealso.0}}
<h5 id="{{id}}_seealso">{{__global.seealso}}</h5>
<div class="seealso">
{{/seealso.0}}
{{#seealso}}
  {{#isCref}}
    <div>{{{type.specName.0.value}}}</div>
  {{/isCref}}
  {{^isCref}}
    <div>{{{url}}}</div>
  {{/isCref}}
{{/seealso}}
{{#seealso.0}}
</div>
{{/seealso.0}}
{{/children}}
{{/children}}
{{#implements.0}}
<h3 id="implements">{{__global.implements}}</h3>
{{/implements.0}}
{{#implements}}
<div class="implements-content">
  {{#definition}}
    <xref uid="{{definition}}" altProperty="fullName" displayProperty="nameWithType"/>
  {{/definition}}
  {{^definition}}
    <xref uid="{{uid}}" altProperty="fullName" displayProperty="nameWithType"/>
  {{/definition}}
</div>
{{/implements}}
{{#extensionMethods.0}}
<h3 id="extensionmethods">{{__global.extensionMethods}}</h3>
{{/extensionMethods.0}}
{{#extensionMethods}}
<div class="extensionmethods-content">
  {{#definition}}
    <xref uid="{{definition}}" altProperty="fullName" displayProperty="nameWithType"/>
  {{/definition}}
  {{^definition}}
    <xref uid="{{uid}}" altProperty="fullName" displayProperty="nameWithType"/>
  {{/definition}}
</div>
{{/extensionMethods}}
{{#seealso.0}}
<h3 id="seealso">{{__global.seealso}}</h3>
<div class="seealso">
{{/seealso.0}}
{{#seealso}}
  {{#isCref}}
    <div>{{{type.specName.0.value}}}</div>
  {{/isCref}}
  {{^isCref}}
    <div>{{{url}}}</div>
  {{/isCref}}
{{/seealso}}
{{#seealso.0}}
</div>
{{/seealso.0}}


<script>
		function getItems(selector) {
			return document.querySelectorAll(selector);
		}

		//CLASS FUNCTIONS
		function getClassNameIndex(parts) {
			for (var i = 0; i < parts.length; i++) {
				if (parts[i] === "class") {
					return i + 1;
				}
			}
			return 0;
		}

		function getClassGenericStartIndex(parts, classNameIndex) {
			let part = parts[classNameIndex];
			if (part.includes("&lt;") && part.includes("&gt;")) {
				return part.indexOf("&lt;");
			}
			if (part.includes("&lt;") && part.includes(",")) {
				return part.indexOf("&lt;");
			}
			return 0;
		}

		function classHasMultipleGenerics(parts, classNameIndex) {
			let part = parts[classNameIndex];
			if (part.includes("&lt;")) {
				if (part.includes(',')) {
					return true;
				}
			}
			return false;
		}

		function getClassName(parts, classNameIndex) {
			var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex);
			var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex);

			if (genericStartIndex > 0) {
				parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex);

				if (hasMultipleGenerics) {
					return '<span class="classNameHeading">' + parts[classNameIndex] + '</span><span class="class-multigeneric">&lt;&gt;</span>';
				} else {
					return '<span class="classNameHeading">' + parts[classNameIndex] + '</span><span class="class-generic">&lt;&gt;</span>';
				}
			}
			return '<span class="classNameHeading">' + parts[classNameIndex] + '</span>';
		}

		function cleanCssName(text) {
			if (text) {
				text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', '');
				text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', '');
				text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', '');
				return text.toLowerCase();
			}
			return "";
		}

		function updateClassNames() {
			var items = getItems(".h1-custom-display.className");

			for (var i = 0; i < items.length; i++) {
				var value = items[i].innerHTML;

				if (!value || value.length < 4 || !value.includes(' ')) {
					console.warn("Class is wrong: " + value);
					continue;
				}

				var parts = value.split(' ');
				var classNameIndex = getClassNameIndex(parts);

				for (var j = 0; j < parts.length; j++) {
					if (j > classNameIndex || parts[j] === "sealed" || parts[j] === "public") {
						parts[j] = "";
					} else if (j === classNameIndex) {
						parts[classNameIndex] = getClassName(parts, classNameIndex);
					} else {
						parts[j] = "<span class='classNameHeader className--" + cleanCssName(parts[j]) + "'>" + parts[j] + "</span> ";
					}
				}

				var innerHtml = parts.join('');
				items[i].innerHTML = innerHtml;
			}
		}
		//CLASS FUNCTIONS END

		//FUNCTION FUNCTIONS
		function getFunctionNameIndex(parts) {
			for (var i = 0; i < parts.length; i++) {
				var index = parts[i].indexOf('(');

				if (index > 0) {
					var greaterthan = parts[i].indexOf("&gt;");
					if (greaterthan == -1) {
						//Non-generic function
						return i;
					}

					var lessthan = parts[i].indexOf("&lt;");
					if (lessthan == - 1) {
						return i - 1;
					}
					return i;
				}
			}
			return 0;
		}

		function functionIsGeneric(parts, functionNameIndex) {
			var part = parts[functionNameIndex];
			var isGeneric = part.indexOf("&gt;") >= 0 || part.indexOf("&lt;") >= 0;
			return isGeneric;
		}

		function functionHasMultipleGenerics(parts, functionNameIndex) {
			var part = parts[functionNameIndex];
			return part.indexOf("&lt;") >= 0 && part.indexOf("&gt;") === -1
		}

		function functionHasArguments(parts, functionNameIndex) {
			var p = parts[functionNameIndex];

			var emptyArguments = p.includes("()");

			if (emptyArguments) {
				return !emptyArguments;
			}

			if (p.indexOf(',') >= 0) {
				var nextPart = parts[functionNameIndex + 1];
				emptyArguments = nextPart.includes("()");
				if (emptyArguments) {
					return !emptyArguments;
				} else {
					//Multigeneric function here
					for (var i = functionNameIndex + 1; i < parts.length; i++) {
						if (parts[i].indexOf('(') >= 0) {
							emptyArguments = parts[i].includes("()");
							break;
						}
					}
					return !emptyArguments;
				}
			} else {
				if (parts[functionNameIndex + 1].indexOf(',') >= 0) {
					//Multigeneric function here
				}
			}
			return !emptyArguments;
		}

		function getFunctionName(parts, functionNameIndex) {
			var part = parts[functionNameIndex];

			var hasArguments = functionHasArguments(parts, functionNameIndex);

			var isGeneric = functionIsGeneric(parts, functionNameIndex);

			var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex);

			var genericStartIndex = part.indexOf('&lt;');
			var funcStartIndex = part.indexOf('(');

			if (genericStartIndex >= 0) {
				part = part.substring(0, genericStartIndex);
			}
			if (funcStartIndex >= 0) {
				part = part.substring(0, funcStartIndex);
			}

			var arg = hasArguments ? "<span class='function-args'>( )</span>" : "<span class='function-args--none'>( )</span>";

			if (isMultiGeneric) {
				return part + "<span class='function-multigeneric'>&lt;&gt;</span>" + arg;
			} else if (isGeneric) {
				return part + "<span class='function-generic'>&lt;&gt;</span>" + arg;
			}
			return part + arg;
		}

		function updateFunctionNames() {
			var items = getItems(".h4-custom-display.functionName");

			for (var i = 0; i < items.length; i++) {
				var value = items[i].innerHTML;
				if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) {
					items[i].classList.add("non-function-element");
					items[i].innerHTML = items[i].innerHTML.replace('public', '');
					continue;
				}

				var parts = value.split(' ');

				var functionNameIndex = getFunctionNameIndex(parts);

				parts[functionNameIndex] = getFunctionName(parts, functionNameIndex);

				for (var j = 0; j < parts.length; j++) {
					if (j > functionNameIndex || parts[j] === "public") {
						parts[j] = "";
					}
					else if (j < functionNameIndex) {
						parts[j] = "<span class='custom-keywords custom-keywords--" + cleanCssName(parts[j]) + "'>" + parts[j] + "</span> ";
					}
				}
				var innerHtml = parts.join(' ');
				items[i].innerHTML = innerHtml;
			}
		}

		function addEventsToTabCloseButtons() {
			var i;

			var closeButtons = document.getElementsByClassName("syslib-tab-menu-data--close");
			for (i = 0; i < closeButtons.length; i++) {
				closeButtons[i].addEventListener("click", function () {
					let par = this.parentNode;
					if (par.style.display === "block") {
						par.style.display = "none";
					}

					var clickableTabs = document.getElementsByClassName("syslib-tab-menu-clickable");
					for (var j = 0; j < clickableTabs.length; j++) {
						if (clickableTabs[j].classList.contains("active")) {
							clickableTabs[j].classList.toggle("active");
						}
					}
				})
			}
		}

		function addEventsToTabsAndHideEmptyRows() {
			var i;

			var clickableTabs = document.getElementsByClassName("syslib-tab-menu-clickable");

			for (i = 0; i < clickableTabs.length; i++) {
				clickableTabs[i].addEventListener("click", function (e) {
					e.preventDefault();

					var isActive = this.classList.contains("active");
					if (isActive) {
						this.classList.toggle("active");
						this.nextElementSibling.style.display = "none";
						return;
					}
					else {
						var clickables = document.getElementsByClassName("syslib-tab-menu-clickable");
						if (clickables) {
							for (var j = 0; j < clickables.length; j++) {
								if (clickables[j].classList.contains("active")) {
									clickables[j].classList.toggle("active");
									var sibling = clickables[j].nextElementSibling;
									if (sibling.style.display === "block") {
										sibling.style.display = "none";
									}
								}
							}
						}
						this.classList.toggle("active");
						var content = this.nextElementSibling;
						if (content.style.display === "block") {
							content.style.display = "none";
						} else {
							content.style.display = "block";
						}
					}
				});
			}

			var items = getItems('.markdown.level1.summary.member-summary');
			if (items && items.length) {
				for (var i = 0; i < items.length; i++) {
					if (items[i].children && items[i].children.length === 0) {
						items[i].classList.add("hidden");
					}
					if (items[i].value) {
						if (items[i].value.length <= 1) {
							items[i].classList.add("hidden");
						}
					}

					if (items[i].innerHTML) {
						if (items[i].innerHTML.length <= 1) {
							items[i].classList.add("hidden");
						}
					}

					if (items[i].innerText) {
						if (items[i].innerText.length <= 1) {
							items[i].classList.add("hidden");
						}
					}
				}
			}
		}

    function removeEmptyDataTabs() {
      var tabs = document.getElementsByClassName("syslib-tab-menu-clickable");
      if(tabs) {
        for(var i = 0; i < tabs.length; i++) {
            if(tabs[i]) {
              var data = tabs[i].nextElementSibling;
              if(data && data.childElementCount <= 1) {
                tabs[i].remove();
                i = i - 1;
            }
          }
        }
      }
    }

		//FUNCTION FUNCTIONS END
		setTimeout(updateFunctionNames, 5);
		setTimeout(updateClassNames, 5);
		setTimeout(addEventsToTabCloseButtons, 20);
		setTimeout(addEventsToTabsAndHideEmptyRows, 30);
    setTimeout(removeEmptyDataTabs, 33);

</script>